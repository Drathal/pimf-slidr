$experimental-support-for-mozilla : true;
$experimental-support-for-webkit : true;
$experimental-support-for-opera : false;
$experimental-support-for-khtml : false;
$experimental-support-for-microsoft : false;


@mixin basefontSerif {
  font-family : "Droid Serif", "Constantia", "Lucida Bright", "Lucidabright", "Lucida Serif", "Lucida", "DejaVu Serif", "Bitstream Vera Serif", "Liberation Serif", "Georgia", serif;
}

@mixin basefontSansSerif {
  font-family : "Amaranth", "Segoe UI", "Candara", "Bitstream Vera Sans", "DejaVu Sans", "Bitstream Vera Sans", "Trebuchet MS", "Verdana", "Verdana Ref", sans serif;
}

@mixin baseFontMono {
  font-family : "Consolas", "Andale Mono WT", "Andale Mono", "Lucida Console", "Lucida Sans Typewriter", "DejaVu Sans Mono", "Bitstream Vera Sans Mono", "Liberation Mono", "Nimbus Mono L", Monaco, "Courier New", Courier, monospace;
}

@mixin pseudolistbullet {
  content  : "";
  display  : block;
  width    : 16px;
  height   : 16px;
  position : absolute;
  background-image    : url(../images/mono_icons.png);
  background-position : -912px -144px;
  background-repeat   : no-repeat;
}

@mixin linkoutside {
  content  : "";
  display  : block;
  width    : 16px;
  height   : 16px;
  position : absolute;
  background-image    : url(../images/mono_icons.png);
  background-position : -752px -48px;
  background-repeat   : no-repeat;
}

@mixin placeholder-style {
  color: #777;
}

@mixin apply-placeholders {
  &::-webkit-input-placeholder {
    @include placeholder-style;
  }
  &:-moz-placeholder {
    @include placeholder-style;
  }
  &.placeholder {
    @include placeholder-style;
  }
}

@mixin placeholders {
  @include apply-placeholders;
}

@mixin user-select($type:none) {
  -webkit-user-select: $type;
  -moz-user-select: $type;
  -ms-user-select: $type;
  user-select: $type;
}

// Cubic
$easeInCubic     :  cubic-bezier(0.550, 0.055, 0.675, 0.190);
$easeOutCubic    :  cubic-bezier(0.215, 0.610, 0.355, 1.000);
$easeInOutCubic  :  cubic-bezier(0.645, 0.045, 0.355, 1.000);

// Circ
$easeInCirc      :  cubic-bezier(0.600, 0.040, 0.980, 0.335);
$easeOutCirc     :  cubic-bezier(0.075, 0.820, 0.165, 1.000);
$easeInOutCirc   :  cubic-bezier(0.785, 0.135, 0.150, 0.860);

// Expo
$easeInExpo      :  cubic-bezier(0.950, 0.050, 0.795, 0.035);
$easeOutExpo     :  cubic-bezier(0.190, 1.000, 0.220, 1.000);
$easeInOutExpo   :  cubic-bezier(1.000, 0.000, 0.000, 1.000);

// Quad
$easeInQuad      :  cubic-bezier(0.550, 0.085, 0.680, 0.530);
$easeOutQuad     :  cubic-bezier(0.250, 0.460, 0.450, 0.940);
$easeInOutQuad   :  cubic-bezier(0.455, 0.030, 0.515, 0.955);

// Quart
$easeInQuart     :  cubic-bezier(0.895, 0.030, 0.685, 0.220);
$easeOutQuart    :  cubic-bezier(0.165, 0.840, 0.440, 1.000);
$easeInOutQuart  :  cubic-bezier(0.770, 0.000, 0.175, 1.000);

// Quint
$easeInQuint     :  cubic-bezier(0.755, 0.050, 0.855, 0.060);
$easeOutQuint    :  cubic-bezier(0.230, 1.000, 0.320, 1.000);
$easeInOutQuint  :  cubic-bezier(0.860, 0.000, 0.070, 1.000);

// Sine
$easeInSine      :  cubic-bezier(0.470, 0.000, 0.745, 0.715);
$easeOutSine     :  cubic-bezier(0.390, 0.575, 0.565, 1.000);
$easeInOutSine   :  cubic-bezier(0.445, 0.050, 0.550, 0.950);


// compass mixins
@mixin perspective($p) {
  @include experimental(perspective, $p, -moz, -webkit, -o, -ms, not -khtml, official);
}



@mixin experimental($property, $value, $moz: $experimental-support-for-mozilla, $webkit: $experimental-support-for-webkit, $o: $experimental-support-for-opera, $ms: $experimental-support-for-microsoft, $khtml: $experimental-support-for-khtml, $official: true) {
  @if $webkit and $experimental-support-for-webkit {
    -webkit-#{$property}: $value;
  }
  @if $khtml and $experimental-support-for-khtml {
    -khtml-#{$property}: $value;
  }
  @if $moz and $experimental-support-for-mozilla {
    -moz-#{$property}: $value;
  }
  @if $ms and $experimental-support-for-microsoft {
    -ms-#{$property}: $value;
  }
  @if $o and $experimental-support-for-opera {
    -o-#{$property}: $value;
  }
  @if $official {
    #{$property}: $value;
  }
}

@mixin experimental-value($property, $value, $moz: $experimental-support-for-mozilla, $webkit: $experimental-support-for-webkit, $o: $experimental-support-for-opera, $ms: $experimental-support-for-microsoft, $khtml: $experimental-support-for-khtml, $official: true) {
  @if $webkit and $experimental-support-for-webkit {
    #{$property}: -webkit-#{$value};
  }
  @if $khtml and $experimental-support-for-khtml {
    #{$property}: -khtml-#{$value};
  }
  @if $moz and $experimental-support-for-mozilla {
    #{$property}: -moz-#{$value};
  }
  @if $ms and $experimental-support-for-microsoft {
    #{$property}: -ms-#{$value};
  }
  @if $o and $experimental-support-for-opera {
    #{$property}: -o-#{$value};
  }
  @if $official {
    #{$property}: #{$value};
  }
}

@mixin scale3d($scale-x: $default-scale-x, $scale-y: $default-scale-y, $scale-z: $default-scale-z, $perspective: false) {
  $trans: scale3d($scale-x, $scale-y, $scale-z);
  @if $perspective {
    $trans: perspective($perspective) $trans;
  }
  @include transform3d($trans);
}

@mixin simple-transform($scale: false, $rotate: false, $trans-x: false, $trans-y: false, $skew-x: false, $skew-y: false, $origin-x: false, $origin-y: false) {
  @include create-transform(false, $scale, $scale, false, false, false, $rotate, false, $trans-x, $trans-y, false, $skew-x, $skew-y, $origin-x, $origin-y, false, false);
}

@mixin create-transform($perspective: false, $scale-x: false, $scale-y: false, $scale-z: false, $rotate-x: false, $rotate-y: false, $rotate-z: false, $rotate3d: false, $trans-x: false, $trans-y: false, $trans-z: false, $skew-x: false, $skew-y: false, $origin-x: false, $origin-y: false, $origin-z: false, $only3d: false) {
  $trans: unquote("");
  // perspective
  @if $perspective {
    $trans: perspective($perspective);
  }
  // scale
  @if $scale-x and $scale-y {
    @if $scale-z {
      $trans: $trans scale3d($scale-x, $scale-y, $scale-z);
    }
    @else {
      $trans: $trans scale($scale-x, $scale-y);
    }
  }
  @else {
    @if $scale-x {
      $trans: $trans scaleX($scale-x);
    }
    @if $scale-y {
      $trans: $trans scaleY($scale-y);
    }
    @if $scale-z {
      $trans: $trans scaleZ($scale-z);
    }
  }
  // rotate
  @if $rotate-x {
    $trans: $trans rotateX($rotate-x);
  }
  @if $rotate-y {
    $trans: $trans rotateY($rotate-y);
  }
  @if $rotate-z {
    $trans: $trans rotateZ($rotate-z);
  }
  @if $rotate3d {
    $trans: $trans rotate3d($rotate3d);
  }
  // translate
  @if $trans-x and $trans-y {
    @if $trans-z {
      $trans: $trans translate3d($trans-x, $trans-y, $trans-z);
    }
    @else {
      $trans: $trans translate($trans-x, $trans-y);
    }
  }
  @else {
    @if $trans-x {
      $trans: $trans translateX($trans-x);
    }
    @if $trans-y {
      $trans: $trans translateY($trans-y);
    }
    @if $trans-z {
      $trans: $trans translateZ($trans-z);
    }
  }
  // skew
  @if $skew-x and $skew-y {
    $trans: $trans skew($skew-x, $skew-y);
  }
  @else {
    @if $skew-x {
      $trans: $trans skewX($skew-x);
    }
    @if $skew-y {
      $trans: $trans skewY($skew-y);
    }
  }
  // apply it!
  @include transform($trans, $only3d);
  @include transform-origin($origin-x, $origin-y, $origin-z, $only3d);
}

@mixin transform($transform, $only3d: false) {
  @if $only3d {
    @include experimental(transform, $transform, -moz, -webkit, -o, -ms, not -khtml, official);
  }
  @else {
    @include experimental(transform, $transform, -moz, -webkit, -o, -ms, not -khtml, official);
  }
}

@mixin transform-origin($origin-x: $default-origin-x, $origin-y: $default-origin-y, $origin-z: false, $only3d: if($origin-z, true, false)) {
  $origin: unquote("");
  @if $origin-x or $origin-y or $origin-z {
    @if $origin-x {
      $origin: $origin-x;
    }
    @else {
      $origin: 50%;
    }
    @if $origin-y {
      $origin: $origin $origin-y;
    }
    @else {
      @if $origin-z {
        $origin: $origin 50%;
      }
    }
    @if $origin-z {
      $origin: $origin $origin-z;
    }
    @include apply-origin($origin, $only3d);
  }
}

@mixin apply-origin($origin, $only3d) {
  $only3d: $only3d or length($origin)> 2;
  @if $only3d {
    @include experimental(transform-origin, $origin, -moz, -webkit, -o, -ms, not -khtml, official);
  }
  @else {
    @include experimental(transform-origin, $origin, -moz, -webkit, -o, -ms, not -khtml, official);
  }
}

@mixin border-radius($radius: $default-border-radius, $vertical-radius: false) {
  @if $vertical-radius {
    // Webkit doesn't understand the official shorthand syntax for specifying
    // a vertical radius unless so in case there's several we only take the first.
    @include experimental(border-radius, first-value-of($radius) first-value-of($vertical-radius), not -moz, -webkit, not -o, not -ms, not -khtml, not official);
    @include experimental("border-radius", $radius unquote("/") $vertical-radius, -moz, not -webkit, not -o, not -ms, -khtml, official);
  }
  @else {
    @include experimental(border-radius, $radius);
  }
}

@mixin border-corner-radius($vert, $horz, $radius: $default-border-radius) {
  // Support for mozilla's syntax for specifying a corner
  @include experimental(unquote("border-radius-#{$vert}#{$horz}"), $radius, -moz, not -webkit, not -o, not -ms, not -khtml, not official);
  @include experimental("border-#{$vert}-#{$horz}-radius", $radius, not -moz, -webkit, not -o, not -ms, -khtml, official);
}

@mixin single-box-shadow($color: $default-box-shadow-color, $hoff: $default-box-shadow-h-offset, $voff: $default-box-shadow-v-offset, $blur: $default-box-shadow-blur, $spread: $default-box-shadow-spread, $inset: $default-box-shadow-inset) {
  @if not ($inset == true or $inset == false or $inset == inset) {
    @warn "$inset expected to be true or the inset keyword. Got #{$inset} instead. Using: inset";
  }
  @if $color == none {
    @include box-shadow(none);
  }
  @else {
    $full: $hoff $voff;
    @if $blur {
      $full: $full $blur;
    }
    @if $spread {
      $full: $full $spread;
    }
    @if $color {
      $full: $full $color;
    }
    @if $inset {
      $full: inset $full;
    }
    @include box-shadow($full);
  }
}

@mixin box-shadow($shadow-1: default, $shadow-2: false, $shadow-3: false, $shadow-4: false, $shadow-5: false, $shadow-6: false, $shadow-7: false, $shadow-8: false, $shadow-9: false, $shadow-10: false) {
  @if $shadow-1 == default {
    $shadow-1: 'rgba(0,0,0,0.25), 0, 5px, 10px, 0px, false';
  }
  $shadow: compact($shadow-1, $shadow-2, $shadow-3, $shadow-4, $shadow-5, $shadow-6, $shadow-7, $shadow-8, $shadow-9, $shadow-10);
  @include experimental(box-shadow, $shadow, -moz, -webkit, not -o, not -ms, not -khtml, official);
}